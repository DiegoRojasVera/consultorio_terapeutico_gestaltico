import 'dart:convert';import 'package:consultorio_terapeutico_gestaltico/controllers/databasehelper.dart';import 'package:consultorio_terapeutico_gestaltico/models/api_response.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_rating_bar/flutter_rating_bar.dart';import 'package:http/http.dart' as http;import '../models/user.dart';import '../services/calificacion_service.dart';import '../services/user_service.dart';import '../utils/utils.dart';import 'home.dart';class DetailCalificacion extends StatefulWidget {  List list;  int index;  DetailCalificacion({super.key, required this.index, required this.list});  @override  _DetailCalificacionState createState() => _DetailCalificacionState();}class _DetailCalificacionState extends State<DetailCalificacion> {  DataBaseHelper databaseHelper = DataBaseHelper();  late String? id = widget.list[widget.index]['stylist'];  late String? idServicio = widget.list[widget.index]['service'];  late String? servicena = widget.list[widget.index]['stylistName'];  late String? servicio = widget.list[widget.index]['name'];  List? data;  bool _loading = false;  User? user;  TextEditingController txtCalificacion = TextEditingController();  TextEditingController txtstylist = TextEditingController();  TextEditingController txtComentario = TextEditingController();  TextEditingController txtnombre = TextEditingController();  TextEditingController txtphoto = TextEditingController();//strylist  Future<List> getDataStylist() async {    final response =        await http.get(Uri.parse("http://34.171.207.241/proyecto1/api/stylist/${id}"));    return json.decode(response.body);  }//ratingbar  Future<List> getDataService() async {    try {      final response = await http.get(Uri.parse(          "http://34.171.207.241/proyecto1/api/puntuacion/stylist/${servicena}"));      return json.decode(response.body);    } catch (e) {      print(e.toString());      // Mostrar un mensaje de error al usuario      throw "No se pudo cargar los datos, por favor intenta de nuevo más tarde.";    }  }  void getUser() async {    ApiResponse response = await getUserDetail();    if (response.error == null) {      setState(() {        user = response.data as User;        _loading = false;      });      //   print('${user?.image}'); // add null check with "?"    }  }  @override  void initState() {    // TODO: implement initState    super.initState();    getUser();    id = widget.list[widget.index]['stylist'];    idServicio = widget.list[widget.index]['service'];    widget.list[widget.index]['name'];    print(id);    print(idServicio);    print(servicio);    print("estamos aca");    getDataStylist();    getDataService();  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text((user?.name).toString()),        backgroundColor: Utils.primaryColor,        systemOverlayStyle: SystemUiOverlayStyle.dark,      ),      body: FutureBuilder<List>(        future: getDataStylist(),        builder: (context, snapshot) {          if (snapshot.hasError) print(snapshot.error);          return snapshot.hasData              ? ItemList(list: snapshot.data!)              : const Center(                  child: CircularProgressIndicator(                      valueColor:                          AlwaysStoppedAnimation<Color>(Utils.secondaryColor)),                );        },      ),    );  }  ListView ItemList({required List list}) {    //aca estamos en la tabla stylist    return ListView.builder(      itemCount: list == null ? 0 : list.length,      itemBuilder: (context, id) {        txtstylist.text = "${list[id]['name']}";        return Container(          height: 500,          padding: const EdgeInsets.all(20),          child: Center(            child: Column(              children: <Widget>[                const Padding(                  padding: EdgeInsets.only(top: 30.0),                ),                Center(                  child: CircleAvatar(                    radius: 48,                    backgroundColor: Colors.grey, // Image radius                    backgroundImage: NetworkImage(                      list[id]['photo'],                    ),                  ),                ),                const SizedBox(height: 16),                Text(                  "Estilista: " + list[id]['name'],                  style: const TextStyle(fontSize: 20.0),                ),                const Divider(),                Column(                  children: [                    TextFormField(                      keyboardType: TextInputType.emailAddress,                      controller: txtComentario,                      maxLines: 5,                      decoration: InputDecoration(                        labelText: 'Comentario',                        hintText: 'Ingrese su comentario aquí',                        border: OutlineInputBorder(                          borderRadius: BorderRadius.circular(10.0),                        ),                      ),                    ),                    const SizedBox(height: 10),                    RatingBar.builder(                      initialRating: 1,                      minRating: 1,                      direction: Axis.horizontal,                      allowHalfRating: true,                      itemCount: 5,                      itemSize: 30,                      itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),                      itemBuilder: (context, _) => const Icon(                        Icons.star,                        color: Colors.amber,                      ),                      onRatingUpdate: (rating) {                        txtCalificacion.text = rating.toInt().toString();                        print(rating);                      },                    ),                    const SizedBox(height: 10),                    ElevatedButton(                      style: ElevatedButton.styleFrom(                          backgroundColor: Utils.primaryColor),                      child: const Text(                        "Agregar Comentario",                        style: TextStyle(color: Colors.white),                      ),                      onPressed: () {                        txtphoto.text = '${user?.image}';                        txtnombre.text = '${user?.name}';                        guardar();                        _showAlertDialog();                        print("guardado");                      },                    ),                  ],                )              ],            ),          ),        );      },    );  }  void guardar() async {    print(txtCalificacion.text);    print(txtstylist.text);    print(txtnombre.text);    print(txtComentario.text);    print(txtphoto.text);    ApiResponse response = await calificacion(      txtCalificacion.text,      txtstylist.text,      txtComentario.text,      txtnombre.text,      txtphoto.text,    );    print(response.error);    if (response.error == null) {      //     ScaffoldMessenger.of(context)      //         .showSnackBar(SnackBar(content: Text('${response.data}')));      Navigator.of(context).pushAndRemoveUntil(        MaterialPageRoute(builder: (context) => const Home()),        (route) => false,      );    } else {      ScaffoldMessenger.of(context).showSnackBar(SnackBar(        content: Text('${response.error}'),      ));      setState(() {        _loading = !_loading;      });    }  }  void _showAlertDialog() {    showDialog(        context: context,        builder: (buildcontext) {          return const AlertDialog(            title: Text("Mensaje"),            content: Text("Gracias por su comentario"),            actions: <Widget>[],          );        });  }}